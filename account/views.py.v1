from django.shortcuts import render
from django.http import HttpResponse
from django.contrib.auth import authenticate, login
from .forms import LoginForm, RegistrationForm


#自定义登录方法
def user_login(request):
    if request.method == "POST":                 #如果是登录框提交数据
        login_form = LoginForm(request.POST)     #获取提交的数据
        if login_form.is_valid():                #验证成功
            cd = login_form.cleaned_data         #获取数据
            user = authenticate(username=cd['username'], password=cd['password'])   #验证数据库密码都正确（和库里对比）

            if user:                     # 验证正确
                login(request, user)    #登录
                return HttpResponse("登录成功")    #返回给页面展示
            else:
                return HttpResponse("用户名密码不对")
        else:
            return HttpResponse("瞎输入，不识别")


    if request.method == "GET":             #如果是GET请求
        login_form = LoginForm()            #即请求页面，类似刷新
        return render(request, "account/login.html", {"form":login_form})   #将登录框显示给用户，将输出框login_form类传给html页面



#配置注册方法
def register(request):
    if request.method == "POST":                    #如果是post提交则继续
        user_form = RegistrationForm(request.POST)  #接收数据，放到表单中，将前端提交的请求作为参数传给注册Form表单
        if user_form.is_valid():                    #如果验证符合规范，则继续
            new_user = user_form.save(commit=False)    #只作标记，并不真保存
            new_user.set_password(user_form.cleaned_data['password'])   #获取输入的密码
            new_user.save()                         #保存到库
            return HttpResponse("注册成功")          #直接返加给页面，占整个浏览器，返回注册成功
        else:                                       #注册不符合规范
            return HttpResponse("抱歉，注册失败")     #返回注册失败
    else:                                           #如果是GET请求（不是POST就是GET）
        user_form = RegistrationForm()              #赋值空表单
        return render(request, "account/register.html", {"form": user_form})    #将空表单传给HTML显示给用户，也叫渲染





